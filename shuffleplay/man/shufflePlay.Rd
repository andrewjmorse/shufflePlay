% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/playlist_shuffle.R
\name{shufflePlay}
\alias{shufflePlay}
\title{Shuffle Play Generator}
\usage{
shufflePlay(
  songs,
  n = 100,
  randomness = 0.05,
  buffer = 4,
  minRec = 0.2,
  verbose = F
)
}
\arguments{
\item{songs}{a strictly positive vector of numeric song IDs.}

\item{n}{the number of songs to play.}

\item{randomness}{a non-negtive number affecting how much of the playlist will shuffle. See 'Details'.}

\item{buffer}{the number of songs that must play before a song repeats.}

\item{minRec}{the minimum proportion of songs to recycle into.}

\item{verbose}{if TRUE, also returns every song played, in order.}
}
\value{
\code{shufflePlay} returns a list containing 1-2 elements:
\tabular{ll}{
  \code{plays} \tab a vector of the number of times each song played. \cr
  \code{playlist} \tab if \code{verbose=TRUE}, a vector of every song played, in order. \cr
}
}
\description{
\code{shufflePlay} takes an input of song IDs and simulates a shuffled playlist that corresponds to an intuitive understanding of randomness.
}
\details{
\code{shufflePlay} uses a truncated form of true randomness, described internally as a recycle bin, to generate playlists. The size of the bin is determined partially by the following equation: \deqn{1 - e^{-randomness * ln(length(songs))}}
And partially by the parameters \code{buffer} and \code{minRec}, as described. The bin occupies the latter portion of the playlist of songs. Once played, songs are shuffled into the bin via a uniform random variable.
}
\examples{
# generates the plays and playlist object for a list of 200 songs, played 300 times
shufflePlay(1:200, n=300, verbose=T)
}
\author{
Andrew Morse, \email{andrewmorse@uchicago.edu}
}
